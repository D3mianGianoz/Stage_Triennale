--- Metodo alternativo non funzionante

def test_build(ontology_manger):
    file_object = open("OntologyInput", "r")
    file_list = file_object.read().splitlines()

    # Classes
    class_names_list = file_list[1].split()
    print(class_names_list)
    for class_name in class_names_list:
        ontology_manager.create_class(class_name)

    # Sub_Classes
    sub_class_list = file_list[4].split()
    print(sub_class_list)
    for classes_couple in sub_class_list:
        split_classes_couple = classes_couple.split(",")
        sub_class = ontology_manager.get_class(split_classes_couple[0])
        super_class = ontology_manager.get_class(split_classes_couple[1])
        ontology_manager.add_sub_class(sub_class, super_class)

    # Member_to_class
    list_couple_member_classes = file_list[7].split(" | ")
    print(list_couple_member_classes)
    for couple_member_classes in list_couple_member_classes:
        couple_splitted = couple_member_classes.split(";")
        member_name = couple_splitted[0]
        classes = couple_splitted[1].split(",")
        i = 0
        while i < len(classes):
            if i == 0:
                member_identifier = ontology_manager.add_member_to_class(member_name,
                                                                         ontology_manager.get_class(classes[i]))
            else:
                ontology_manager.add_member_to_multiple_classes(member_identifier,
                                                                [ontology_manager.get_class(classes[i])])
            i += 1

    # Typical facts
    fact_list = file_list[10:]
    print(fact_list)
    for fact in fact_list:
        splitted_fact = fact.split(",")
        splitted_fact[0] = splitted_fact[0].replace("Typical", "", 1).replace("(", "").replace(")", "")
        # Crea la classe complementare negata
        if splitted_fact[1].startswith("Not"):
            splitted_fact[1] = splitted_fact[1].replace("Not", "", 1).replace("(", "").replace(")", "")
            splitted_fact_1_identifier = ontology_manager.create_class("Not(" + splitted_fact[1] + ")")
            splitted_fact_1_identifier.equivalent_to = [
                ontology_manager.create_complementary_class(ontology_manager.get_class(splitted_fact[1]))]

            # Controllo se c'è la probabilità o no
            if len(splitted_fact) > 2:
                ontology_manager.add_typical_fact(ontology_manager.get_class(splitted_fact[0]),
                                                  ontology_manager.get_class("Not(" + splitted_fact[1] + ")"),
                                                  float(splitted_fact[2]))
            else:
                ontology_manager.add_typical_fact(ontology_manager.get_class(splitted_fact[0]),
                                                  ontology_manager.get_class("Not(" + splitted_fact[1] + ")"))
        else:
            if len(splitted_fact) > 2:
                ontology_manager.add_typical_fact(ontology_manager.get_class(splitted_fact[0]),
                                                  ontology_manager.get_class(splitted_fact[1]),
                                                  float(splitted_fact[2]))
            else:
                ontology_manager.add_typical_fact(ontology_manager.get_class(splitted_fact[0]),
                                                  ontology_manager.get_class(splitted_fact[1]))
    file_object.close()